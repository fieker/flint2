/*
    Copyright (C) 2014 Abhinav Baid

    This file is part of FLINT.

    FLINT is free software: you can redistribute it and/or modify it under
    the terms of the GNU Lesser General Public License (LGPL) as published
    by the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.  See <http://www.gnu.org/licenses/>.
*/

*******************************************************************************

    Memory management

*******************************************************************************

fmpq * _fmpq_vec_init(slong n)

    Initialises a vector of \code{fmpq} values of length $n$ and sets
    all values to 0. This is equivalent to generating a \code{fmpz} vector
    of length $2n$ with \code{_fmpz_vec_init} and setting all denominators
    to 1.

void _fmpq_vec_clear(fmpq * vec, slong n)

    Frees an \code{fmpq} vector.


*******************************************************************************

    Randomisation

*******************************************************************************

void _fmpq_vec_randtest(fmpq * f, flint_rand_t state, 
                        slong len, mp_bitcnt_t bits)

    Sets the entries of a vector of the given length to random rationals with 
    numerator and denominator having up to the given number of bits per entry.

void _fmpq_vec_randtest_uniq_sorted(fmpq * vec,
                        flint_rand_t state, slong len, mp_bitcnt_t bits)

    Sets the entries of a vector of the given length to random distinct
    rationals with numerator and denominator having up to the given number
    of bits per entry. The entries in the vector are sorted.

*******************************************************************************

    Sorting

*******************************************************************************

void _fmpq_vec_sort(fmpq * vec, slong len)

    Sorts the entries of \code{(vec, len)}.

*******************************************************************************

    Conversions

*******************************************************************************

void _fmpq_vec_set_fmpz_vec(fmpq * res, const fmpz * vec, slong len)

    Sets \code{(res, len)} to \code{(vec, len)}.

*******************************************************************************

    Dot product

*******************************************************************************

void _fmpq_vec_dot(fmpq_t res, const fmpq * vec1, const fmpq * vec2, slong len)

    Sets \code{res} to the dot product of the vectors \code{(vec1, len)} and 
    \code{(vec2, len)}.

*******************************************************************************

    Input and output

*******************************************************************************

int _fmpq_vec_fprint(FILE * file, const fmpq * vec, slong len)

    Prints the vector of given length to the stream \code{file}. The
    format is the length followed by two spaces, then a space separated
    list of coefficients. If the length is zero, only $0$ is printed.

    In case of success, returns a positive value. In case of failure,
    returns a non-positive value.

int _fmpq_vec_print(const fmpq * vec, slong len)

    Prints the vector of given length to \code{stdout}.

    For further details, see \code{_fmpq_vec_fprint()}.
